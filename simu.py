import math
import time

import numpy as np
import pybullet as p
import pybullet_data
import csv

from scipy.optimize import minimize, Bounds
from scipy.stats import chi2
from plotter import TrajectoryPlotter
from predictor import Predictor

"""Gaussian distribution settings"""
P = 0.99
USE_GAUSSIAN = True

"""Environment settings"""
START_POS = [0, 0]
TARGET_POS = [0, 0]
START_POSES = [
    [-5.542670260397065, -1.5164073990999754],
    [-7.061076060096053, -6.637124121661894],
    [-5.1560843143435795, 5.160463024874405],
    [-7.246506786098, 2.5388287175413318],
    [-5.833382169174185, -1.3087675788606443],
    [-6.402432643212956, 2.5339338993689573],
    [-7.227756404799459, 0.2886773049055327],
    [-5.066301193374706, 0.9770638022907701],
    [-6.832684597828747, 5.420847385935646],
    [-7.405415493271846, -0.2890821400360446],
    [-6.952223050309387, 3.3917571876144272],
    [-6.858859629786317, -2.0927177041303455],
    [-7.147803945989835, -2.001943821661931],
    [-6.24452492870619, 5.827728167802061],
    [-6.441654361846548, 6.208012772866562],
    [-6.023812021031574, -3.314526013637204],
    [-7.38947782217312, 4.515001902279824],
    [-6.1933840693214, 7.025966503560763],
    [-5.382354999534273, 0.8019507049262344],
    [-7.067633028492534, 4.196725720029676],
    [-7.429535492544379, -1.674115114916563],
    [-6.229736161825544, -6.017648820302028],
    [-6.2510301659922, -1.5710062113475534],
    [-7.214323800026662, 2.797021460966066],
    [-6.650907066135451, 5.819253034896558],
    [-5.2505010526984295, 3.9349131523117897],
    [-5.1793329513128015, 4.153382124478707],
    [-5.623981100072081, -4.203432477915611],
    [-5.608858071084239, 5.621968788627479],
    [-5.045858219156582, 6.091170048850602],
    [-5.086519571210476, 1.0428383705649917],
    [-6.048427478924767, -0.1776328918952066],
    [-5.922698871981626, 5.146500206162216],
    [-6.421210433002805, -7.169575277703024],
    [-7.212234327655601, 4.94337427869916],
    [-5.528580695059307, -6.928002697812452],
    [-5.415703177312375, -1.1678841903252364],
    [-7.491190424050761, -3.61514743047257],
    [-5.011750688520168, 7.478081063632073],
    [-5.331002993463748, 7.024278513624067],
    [-7.138525704799168, -3.3981031603926253],
    [-6.034624987404638, -1.121514788063938],
    [-5.236924728170072, 0.2545780022507209],
    [-5.089300441336265, -2.6640949488411145],
    [-6.078811041824846, -7.423103082131892],
    [-7.297614925627146, -4.465757144696219],
    [-5.911420590112355, -2.130835545220532],
    [-5.73149565902008, 7.369841133579044],
    [-5.090751766787314, -3.0236122833599897],
    [-6.028987204239276, 2.814800236980993],
    [-5.1530541916819494, -4.926232686337247],
    [-6.771607092605227, 2.1805456938018537],
    [-6.676715055789947, -6.924475285614536],
    [-6.19329624857091, 5.052344642763904],
    [-5.585987701337304, 5.537448229045809],
    [-5.798276158922639, -4.970274956818745],
    [-6.0234597329069715, 7.026613862496102],
    [-7.087366133317124, 3.553084325297837],
    [-7.46345327557417, 2.2465860827057718],
    [-5.719521047920817, 6.2474379609829285],
    [-7.424772545695873, 1.5594193196207922],
    [-5.67604708618516, -5.17806554580026],
    [-5.942017206516435, 6.238490828536417],
    [-6.528805457455124, -5.650870182510156],
    [-7.191391846806771, -0.9346350974562174],
    [-6.4834090261182125, -1.906061409460908],
    [-6.910336328053963, 6.7973574379282855],
    [-6.203263550639879, -5.279272387602944],
    [-5.955523338583116, -3.37332315809096],
    [-5.675743632599563, 7.28153881174207],
    [-5.826771897145818, -1.1362417909315132],
    [-6.717295862488987, 4.132484963919012],
    [-5.478128644190507, -6.362889600667953],
    [-7.3663332488241045, 2.8884316712080036],
    [-7.460168824960026, 3.6132671655132977],
    [-5.765537339190189, -4.204085009462992],
    [-5.346135470800691, -4.643454738149001],
    [-5.665442274203181, -4.244163450175723],
    [-5.906228105633546, 6.307516902886414],
    [-5.15493554581964, 3.5370533731483906],
    [-5.833956562787329, 1.003649506681512],
    [-5.540050029894109, 4.022655591136607],
    [-5.666893945412951, -7.209859592424654],
    [-5.403108804020377, -5.6491082376876465],
    [-6.997905987408657, 0.7012013608837524],
    [-7.458758421624445, 7.142252023099958],
    [-6.849337076328828, -3.4075951843751895],
    [-5.436154681740515, 3.791537708334671],
    [-5.863927732543675, -5.290966002278888],
    [-6.548683637179762, 5.476253957674025],
    [-5.23801777739579, 4.0998242898109005],
    [-5.433642061169146, 6.6121264730579465],
    [-7.069706996968625, 7.482333551664755],
    [-5.418546489031524, -1.1134125106347197],
    [-5.266195043800931, 0.2878600511284466],
    [-5.12259194195663, -4.909714857342763],
    [-6.2932866037182364, -4.013605125532521],
    [-5.442260018311655, -5.55771940585733],
    [-6.455608099775334, -5.933021632017049],
    [-6.755088598438061, 6.191430910233432],
    [-6.855502822076443, -4.8257665209348835],
    [-5.980130228819766, 3.0461698184423014],
    [-6.19702781309225, -0.7137176646774037],
    [-5.763754410209865, 3.19517760194279],
    [-6.369708705659194, -3.586859884668221],
    [-6.3150449217426825, 4.172201733176765],
    [-6.795343320753984, -0.3329254504154946],
    [-6.625180462698969, 5.268023358212904],
    [-5.656856125908803, -7.288165650866394],
    [-6.983299272669525, 1.5100297585977245],
    [-6.384276061077897, -6.8856784131831645],
    [-7.320150121359495, 4.996772647465679],
    [-6.903791029435883, -6.681484409340004],
    [-5.428471194944337, 7.374468552369047],
    [-5.899078482762497, 1.2916218657905496],
    [-6.479320035782728, 3.6278947433959132],
    [-5.4274864618896626, -2.462141228917954],
    [-5.842386459153047, -0.24407085547975704],
    [-6.065518457011795, -4.081171485166753],
    [-5.123430383596963, -5.270156351215369],
    [-5.478880928532402, 0.7836205346271772],
    [-7.087608710764865, 5.522292411811268],
    [-6.584456796379716, -5.591832490594607],
    [-5.08165935868477, -5.324224382774454],
    [-5.94102744735792, -0.5099768533244129],
    [-5.236815613666738, 0.9413988319573132],
    [-5.124050955671732, 0.9663251657503071],
    [-6.2253777326044215, 2.3519585973858224],
    [-5.846153360409099, 2.619010085830059],
    [-6.220153620699249, -5.027075758120643],
    [-7.084038114038034, -1.636170049545143],
    [-5.1689290431087365, -4.395275055994457],
    [-5.249668961284748, 4.361070208447099],
    [-5.990976038452465, -4.498947183686881],
    [-5.049277066947746, -3.655048114214],
    [-6.96459223338477, 0.6294855400136399],
    [-6.610522992017328, 7.020929928250158],
    [-6.990410448313307, 5.514536888538714],
    [-7.017745082379752, 2.9236889030241375],
    [-7.484388619491852, -7.389457628803669],
    [-6.266906449178317, -5.359731995031218],
    [-6.944032527558146, -2.7969547735073803],
    [-5.933346558691291, 1.0303539321321846],
    [-6.260278632911545, 3.516469885652528],
    [-5.982233363003713, -4.267028500988201],
    [-6.386570203971402, -5.06917975680452],
    [-5.625115579631191, -5.00012079398379],
    [-7.469964332199337, 6.127944940909488],
    [-5.527380269789788, 6.181551851636339],
    [-5.65450162329935, 1.1520754862307392],
    [-7.138730684642503, -4.837340366529964],
    [-7.243433355364581, -1.9748930308068937],
    [-6.263529842781434, 4.12966351010229],
    [-6.138214727116195, 6.537560875130362],
    [-5.881681838156641, 5.925900532248287],
    [-6.963210524912893, -0.3365409612515853],
    [-7.150883484212767, -6.104218692616222],
    [-6.773100960006302, -5.275879177530799],
    [-6.451646048394588, -1.073130217330772],
    [-6.947042731393397, -4.655663156290202],
    [-6.3951039469336575, 6.295072853780642],
    [-5.226560426250501, -3.576453500882073],
    [-5.326576476508523, 1.791145729301487],
    [-6.9377502330913465, 4.226458288611383],
    [-6.893566828388932, -4.330125452207124],
    [-6.111137184740731, 6.507252138980782],
    [-6.0331819341220125, -0.41159473616773656],
    [-6.465921380759342, 6.935262911945749],
    [-6.533846521882785, -4.006613849542267],
    [-5.681034633981456, -6.926069504896998],
    [-7.3857596324620545, -6.24926316849342],
    [-5.849597384916642, -5.368866188286793],
    [-7.421287003425009, -6.897680457675972],
    [-7.457406995280388, -3.98624809555172],
    [-6.728464675209679, -3.293335816542048],
    [-5.171001808937121, 3.183099988801853],
    [-6.523231508686502, 0.7680775889799492],
    [-5.783597869628956, 2.6200580934061737],
    [-6.813826884562316, -2.1281497997869936],
    [-6.6743440903655396, -3.2733839592255416],
    [-5.630600654181232, 0.023745547560160674],
    [-6.731848877086205, -4.583724668086017],
    [-5.677437420254097, -1.9774287677845912],
    [-7.006285557583705, -1.8790424540789665],
    [-5.863967170099215, 1.6042610265162232],
    [-6.623838939497261, 1.1268274450671978],
    [-5.604920008299894, 2.6209529485434846],
    [-5.116321171453305, -5.392407598328481],
    [-5.0899703286113365, -3.195466571249522],
    [-6.472979158626229, -5.5690035488327805],
    [-7.284275519792607, 4.162134844797814],
    [-5.355692103259608, -4.992825411307123],
    [-5.000879219005523, 1.0942637092385397],
    [-5.992847450552471, -4.653954818991549],
    [-5.705361638309828, 7.372147607641979],
    [-6.7698007772098014, 6.639279524527096],
    [-5.589228408520217, -0.08244640708437867],
    [-5.803755102384548, 2.4959885697844317],
    [-6.123256085736463, -4.009155082005216],
    [-5.482721146242271, -0.7273387520475012],
    [-6.585818714727024, 5.211629632135367],
    [-7.043884416396009, 0.9272179684623669],
    [-6.2633130614308055, 2.8692233161159777],
    [-6.9527747209799955, -6.112888955303938],
    [-6.0403779351521045, -3.766016471593159],
    [-6.703450793438718, -1.3171386497919526],
    [-5.818143429787529, -4.451830799973738],
    [-5.871225272144361, 6.092442765800692],
    [-5.521294685671997, -0.36304117033445493],
    [-6.002768158382739, -4.321338515944028],
    [-6.825754679795341, -5.654089087175214],
    [-5.443906781904233, -7.460677619862163],
    [-6.266826801363197, 7.472220700241511],
    [-7.172782479662279, 5.795608633881022],
    [-6.669280040345377, 4.873380139942315],
    [-6.850169855309621, 3.5545235279406935],
    [-6.669011051670688, 6.288515832519325],
    [-6.46460542029135, -0.6467351176067488],
    [-6.873495278952825, -1.6071688605581942],
    [-5.375355228026804, -6.560441779764193],
    [-5.897434983047297, 3.8510683220234014],
    [-5.777813059733625, 5.745244455097838],
    [-5.161674875677054, 3.235283198312821],
    [-6.92067150159094, 1.0751110061256473],
    [-6.322564338349951, 4.180705211317196],
    [-5.281553472042878, -7.015275218609336],
    [-6.831312071816001, -3.832356284799797],
    [-5.481565998643012, 5.592791440008268],
    [-5.885520925437793, -3.0266489865674577],
    [-6.388735242008304, 6.137659397830253],
    [-5.201998648380982, 3.0520123561151404],
    [-5.251379527706988, 4.912594889750384],
    [-5.543735965906242, 0.5506424354401318],
    [-7.071747365662494, 1.496971783528224],
    [-5.86050096737984, 0.2344667035201038],
    [-5.926924307825089, -5.296695722398989],
    [-6.362765829373967, 6.146417576693647],
    [-6.690119740551244, 3.2838030581701307],
    [-7.050049954984609, 0.7657621184321357],
    [-5.81059164723341, 3.1780338078326587],
    [-6.141954787793395, -4.254301083374239],
    [-6.227051976633775, -2.204479172913926],
    [-7.403203952058827, -3.0315233319374233],
    [-6.8860873398319296, -5.38858641176926],
    [-5.478875016155827, 5.872029736431642],
    [-5.5180728415829945, 7.28630367213453],
    [-6.858020044171762, -1.3468166802048511],
    [-6.304429397254195, -4.983581082758372],
    [-6.208320721575527, 1.9426854649951952],
    [-6.458792403930616, -2.316787598342472],
    [-7.397393360530187, -5.859747374334464],
    [-6.379730578122011, 6.1538739606330815],
    [-7.481804238023625, -1.5278651584633138],
    [-7.090888731590003, -6.6852499222920345],
    [-6.6828463220689285, 7.443058324315599],
    [-5.274115607704481, 1.3032885850447506],
    [-6.982790089728556, -2.1161437175489297],
    [-6.899686901688186, 5.964351702404944],
    [-5.418391851987159, 4.2966393829924545],
    [-7.013431796942154, 4.894853024183956],
    [-6.767733562171419, 0.22331186177735596],
    [-5.0634398414499024, -7.282083494795055],
    [-7.210193720054416, 1.6496158833371002],
    [-6.421208715624228, -1.3947730329656673],
    [-6.9834081396518055, 1.4050709742763914],
    [-5.884328467009258, -4.065595564834712],
    [-5.123724218904749, 3.5415784206805743],
    [-5.234547793188122, 4.055530861044913],
    [-5.322714000227403, 0.1074162879542726],
    [-7.134305404134011, 5.597520969498985],
    [-5.55772991747525, -5.5812712993739995],
    [-5.372442644139898, -4.832332532671073],
    [-7.455426576992622, -1.646190815042865],
    [-6.935080978929119, -1.4538560214331424],
    [-7.03709119533589, -0.8860565466374295],
    [-5.328499890722974, 0.9985387823079552],
    [-6.314070322352575, -0.3616476030152773],
    [-6.713798535766043, -0.6145112158718868],
    [-6.740039420111656, -2.8396721596398224],
    [-5.565498662834006, 4.735752822038476],
    [-7.120836815827161, 7.148961706889608],
    [-7.20434451721917, -3.8753467906609105],
    [-5.217901239370226, 4.926770520180575],
    [-6.61025731506405, 4.029673217374496],
    [-6.470113121041227, -3.1943820377833045],
    [-6.2788420073720275, 0.6086671116603579],
    [-6.775243510157073, 2.269359813438438],
    [-6.59172549273922, -0.5043788716672006],
    [-5.891756850870292, 4.873099408176209],
    [-5.264753736262538, 1.1627580376986035],
    [-5.817302458358551, -6.238754037774058],
    [-5.070296614066812, -6.311716816127576],
    [-7.227915390816182, 5.524758864713078],
    [-5.472194710958043, -5.497663041068475],
    [-6.178354202714383, 2.9135371721391135],
    [-5.455911658270475, 2.3057341083253355],
    [-7.352534872185968, 1.423257020797827],
    [-6.082193850780321, -1.4632994936449677],
    [-5.441067367055947, 3.591781548839567],
    [-6.353735503116866, 0.4020066148233168],
]
TARGET_POSES = [
    [5.183391425372378, 7.186809251852035],
    [6.512672361371473, -6.588556527167026],
    [6.351160378623875, -5.534609506001146],
    [6.770922806864756, 2.707213357692261],
    [6.298429981802856, -7.109537513795097],
    [6.046487648162263, -3.8342565403225057],
    [5.913139752561335, 5.1116774443782305],
    [7.152223179342453, -0.4292092870359463],
    [5.534552433288012, -7.489650006620493],
    [5.6007959762085875, 3.8225187710682604],
    [7.158430513820529, 3.3686861799442553],
    [7.071489894689689, 6.673298523174582],
    [6.21963878684952, -0.1883829945929829],
    [5.822394718161718, 1.716446373361551],
    [6.346232469606598, 1.1513150283548104],
    [5.264976021061847, 3.463652108496266],
    [6.413943006033473, -6.5082775094802],
    [5.390750325575605, -0.9707314555965967],
    [6.157810656956851, 7.1023953419796015],
    [5.650328136372891, 2.2055122793120994],
    [6.439638360221284, 1.3696574706192646],
    [5.809394002969331, 7.485908250501012],
    [5.948990238994272, -5.499191299247263],
    [7.228606286179636, 4.5122904631062575],
    [5.994432371004587, 3.7667587996135463],
    [5.132126876713256, -1.7925371112345925],
    [7.368321502803406, -2.1388234247622027],
    [5.650718000195807, 4.867850339228198],
    [7.016088854359857, -1.822937253245943],
    [7.208844329789596, 1.7222114772140849],
    [6.107298766212986, 2.219833638864385],
    [6.544619164064974, -2.466958764296553],
    [6.107754686376767, -3.2160427752517995],
    [6.009549957694685, -3.6153555743052395],
    [5.326011319846517, 6.943072893911566],
    [6.819192600076086, 5.99991357298695],
    [6.316472872253145, 1.1180355951121133],
    [6.4897478984725, -1.5461253525304883],
    [7.423201906696947, 4.17783979633375],
    [7.144394546206219, 4.919864744413111],
    [5.373699413212034, -3.0246653161959873],
    [6.771227121014749, 1.7485204021756022],
    [6.9461233455116345, -0.826442513151644],
    [6.20644966670944, -1.634190938139616],
    [6.3455864225697045, -3.4678028530300002],
    [6.193874795071273, -2.641519159467551],
    [5.581447424997469, 3.3969448010129764],
    [5.650555604938709, -6.61556879549509],
    [5.761891389470403, 5.087831409399962],
    [6.400464097134226, -0.08191492736662997],
    [7.226594663350128, -1.6981933840427637],
    [5.962350870687266, 3.1340142204961694],
    [5.59074852300996, 4.405737365108662],
    [7.031769145182951, 2.9563683089847324],
    [7.1987193698754925, 6.466435680614934],
    [7.092203511601216, -1.0218262632743347],
    [7.379058577028268, -3.1724459230754523],
    [5.033688497247562, -3.2703530921990236],
    [5.388142408439404, -1.3104679018095116],
    [7.0697713710723615, -4.5020686889898895],
    [6.265837257502396, -4.076358787547827],
    [6.366043784501803, 2.718641409412186],
    [6.352817863669866, 0.43419287047697175],
    [5.37661540466125, 3.096222343901653],
    [6.32215877765089, 3.7159751668122603],
    [5.610602932813851, 7.086105324276913],
    [7.293646272627299, -2.436506904671349],
    [7.427872471056823, 5.360566158659191],
    [6.888525479095793, 0.7939603278018765],
    [5.114582214583692, 1.7371550952272887],
    [7.4766855676832735, 1.7595091823464397],
    [7.3504711656909, -1.4009330185818882],
    [6.318905294431596, -2.6657986529422946],
    [6.891500086937796, 0.8022171815186638],
    [5.383151470662923, -3.868326434576713],
    [7.3429019411076215, -1.6271479262823956],
    [7.29463203112166, -7.450732201710181],
    [6.752263569078069, 4.9922499500985165],
    [5.378824076449554, -4.2095429880855],
    [6.383266411952345, -2.4184352514242704],
    [6.095377154110664, -0.42755435596839764],
    [6.812182071743317, -3.8143160608602864],
    [5.37509074945919, -6.040313022350664],
    [6.801060197315154, 3.4034132404905932],
    [7.237191360358283, 2.8029107586343844],
    [5.240348881176263, 0.5671208403074495],
    [5.764485009759712, 3.1385703598096324],
    [5.497208342577515, -3.546937138926651],
    [5.375417858587864, 1.405196543023509],
    [6.247775615479694, 6.838009380197148],
    [5.1054520743654255, 3.9250213980162876],
    [5.001106465915087, -7.377166562610917],
    [7.478556767810368, -6.632295168604749],
    [6.608775043326633, -0.12023857135113403],
    [7.055530469037704, -5.487938313645669],
    [6.715917753908674, 2.3244097375988293],
    [7.0771629959543905, 2.758862288969027],
    [6.3506046590221, 4.183804349014769],
    [6.069954128728741, -7.2160886031573375],
    [5.9996680982013215, -1.2445664624583976],
    [5.017339435004608, 4.24734194104629],
    [6.231388714775013, -5.391624210094633],
    [5.7782687900029055, -3.7822013408578843],
    [6.88154332933453, -4.8950571131458265],
    [6.04295831726829, -3.3492050077351605],
    [6.667750699030516, -1.9592952047573],
    [5.5974205417429195, 2.20714639266882],
    [6.12034949299851, -6.247479504392683],
    [6.771542658282433, -2.8177883003283313],
    [7.482664066999236, -6.111679544689081],
    [7.119362676179446, 7.379315425225853],
    [7.263067586085098, -3.241471670922321],
    [5.670173536220556, 3.5080999358061895],
    [5.07223052538889, 5.669042714287103],
    [5.9782851595616195, -2.9382022455384575],
    [5.388329993456777, 3.2894776826963774],
    [5.928805255772399, 0.16268531732911296],
    [5.547532463577424, -1.8810279537621275],
    [6.425661228437307, 4.896889892378821],
    [5.1088573110471005, -6.607393633754417],
    [6.987778226029487, -1.2246389929539],
    [7.489506379684239, 6.043578340050356],
    [7.080423590578116, 3.2272592762635046],
    [6.099451799183427, 6.458404817314612],
    [6.082590176302929, 5.77758393283025],
    [5.895262948639823, -3.483344515272325],
    [5.129687739960377, 3.831139504227263],
    [7.314191896147407, -6.347306603138861],
    [6.550256135696176, -7.353358454536841],
    [6.953194195814062, -2.604767344883408],
    [6.079126910215522, -5.548205557296011],
    [6.806582460861699, 1.4112192079554777],
    [5.557369233314417, -3.316882087146695],
    [6.973717975960586, 6.181299724810184],
    [5.496730852214746, 2.6098101001920266],
    [5.000591359440663, -1.7348988528342906],
    [7.2708476877053005, -1.077462242406261],
    [5.292208964144165, 1.7250531264338562],
    [7.188732776510173, -3.685741599510608],
    [6.086442265893595, -2.8271185452666376],
    [5.818537166582981, -2.37099319453972],
    [5.994142669331242, -0.5135058844686391],
    [6.314108162206551, -7.3628758662298335],
    [5.829453543590427, 5.88003417017946],
    [7.465686662471242, 1.7816274030727097],
    [6.456085019132928, -4.920598991000361],
    [5.2363128537051375, -3.8638344804315694],
    [5.0383506397795355, 0.7148801022329501],
    [5.705404272034709, -0.6637412622971173],
    [5.001617551196357, -2.123246330717107],
    [6.56998272966464, 6.544033295462233],
    [6.985288114376194, -0.8558874393021814],
    [5.149091405080343, -1.9910440959429474],
    [6.417201218142382, 7.077433364326341],
    [7.144788022642367, -1.372563269683912],
    [6.830037001778395, 6.638406801833117],
    [5.102872103892536, -6.369345735625858],
    [7.169929639367389, 4.679216122653424],
    [5.453566487470556, 0.7650657917215007],
    [6.5140904891498606, -7.186518272325856],
    [5.201043265686692, 4.574366793415125],
    [6.872387056079873, -4.161751959603913],
    [6.897106526315987, -5.725744266599005],
    [5.11537261276039, -0.46784030295212276],
    [6.391197618642678, -2.097157236715808],
    [5.8881684644203975, 1.7387920824887022],
    [6.448870931375021, -5.584247874611371],
    [7.406024102786937, -2.344130898182282],
    [5.612521712208819, -4.453610956007967],
    [5.602542270104272, 7.2404959446759225],
    [7.305055772294638, 2.887967164316713],
    [5.971050629232433, -5.779612601100192],
    [7.145604600200194, 4.312632820077635],
    [6.415131284319207, 4.645737794573707],
    [7.348394489526408, 4.281829826824385],
    [6.074245945890981, 5.8770732742528935],
    [5.975071230988307, -4.456502227706971],
    [6.948612830800579, -5.505383926154226],
    [7.179669788971241, -5.085182807232253],
    [6.946239778542585, -1.750914553176517],
    [6.789232732976801, 3.053900516073167],
    [7.358812638752047, 0.4730858624507208],
    [5.759624521806378, -5.340104151035832],
    [5.687420164521386, -7.0520935909572255],
    [6.503099188376277, -6.759650197495892],
    [7.373981023781587, -2.7966615408621918],
    [6.214380035407929, 6.178692377768362],
    [5.898668869689722, 6.666284709112535],
    [6.490404078879348, 7.116405437331084],
    [6.501449348027681, -2.1035402929039133],
    [6.1640638906057985, -4.224082535741138],
    [7.2199533083575425, 2.8062164425587763],
    [7.003563766201341, -4.353413030324918],
    [5.137639871241651, 3.5995821745102283],
    [6.093717117863063, -4.722643711371779],
    [5.639627001727849, 0.7580133872794139],
    [6.935959132151379, 6.720248289924408],
    [6.619071114492378, -5.000830357679696],
    [7.109423673876062, -3.4605497358948627],
    [6.3299860875743725, 7.1461968245487615],
    [5.8467399078899325, 5.225162071920698],
    [6.33138339626594, -0.43794918421022366],
    [6.871806630823284, 4.9698684748129445],
    [6.209459798556189, -7.3083972097006535],
    [6.855701733105889, -3.577577119763984],
    [5.518132127847718, -2.7891331301023463],
    [6.912180505630746, -7.001811355296928],
    [6.686128210701775, 3.502698442200412],
    [6.477300695081749, 6.243669177232498],
    [6.392204080993038, -6.925260178957121],
    [5.4485128084093, -6.183461663316937],
    [6.712954770638265, -5.919902967210116],
    [7.421368350494911, -4.740820949796696],
    [6.055173314255338, -4.758274905284381],
    [5.710959609175125, 7.356076155580997],
    [5.3196416998221965, 2.621031801835894],
    [7.472456067057479, 1.3502522369406513],
    [6.156910640020477, 2.0173163432578836],
    [5.750570021743638, -4.1552631117697505],
    [5.688576964244739, -4.308213072162361],
    [5.563999687538358, 3.182703408687402],
    [5.261733986159953, 2.300857165827251],
    [6.079334323556079, -3.171397517494797],
    [6.487185638682432, 6.717624299384653],
    [7.350962295676588, -1.1228512506565256],
    [5.097238946554251, 3.6306756344432625],
    [6.472502376935727, 5.657539895941589],
    [6.451075154483557, 1.1075980644455186],
    [6.624204482297962, -3.807030387509141],
    [6.521651118915554, 6.878232460536241],
    [5.067079438248172, 3.4187141707848525],
    [6.700712442836359, 2.692358866247293],
    [5.207483596361605, 2.1343284815288524],
    [7.087254733223844, -6.6944694234895685],
    [7.407066222383186, -1.8896587360895412],
    [5.792269818449963, -3.6771547773391933],
    [7.1106712554570315, -6.135478162036941],
    [5.8982270791609075, 0.7737420895377145],
    [5.032132576178954, 1.3749233314968201],
    [6.094265552351901, 6.339445961903225],
    [7.407399870540863, -4.69434643048702],
    [6.445034004134651, 6.170592192176313],
    [6.325542500782036, 3.1723826351613553],
    [7.302090480214377, 2.757309516257953],
    [6.146837472330415, 3.23448646420122],
    [5.556348360153352, -6.197186995261006],
    [6.866111746467988, -5.276261877459849],
    [6.597321070138062, -4.712684452930263],
    [5.447657301566881, -0.926577026489726],
    [5.45578367665823, 5.571070348482623],
    [6.118662220156535, -4.449548410966816],
    [6.541786338594008, 5.780183209244832],
    [6.557024638277407, 3.7151476479956482],
    [6.306029807458765, 1.5030912248916195],
    [7.331022428548142, 2.4127567709575644],
    [6.202098762933327, 5.237729256776353],
    [5.85598462587599, 3.152515154273239],
    [5.440633376138033, -4.843133047126875],
    [6.610257538076754, 6.254702196004947],
    [7.112939042486416, -5.271095802159024],
    [6.71347200958802, -0.8278868949700966],
    [7.1048994224828395, -4.015037810435343],
    [5.9103607893284105, 0.6526116868386875],
    [5.097230218592632, -6.1142501412616985],
    [6.115955211549844, -2.2510217068805796],
    [6.185213656337758, -5.961340370995664],
    [5.624625829105723, -6.122043802072631],
    [5.889060390982351, 2.821221025474266],
    [5.628841595202671, 2.5096280441164254],
    [6.773283733281015, 4.476542041183732],
    [5.216512073063193, -4.4329592501779125],
    [5.500993809607518, -4.3057024557287],
    [6.992690311692268, 0.25121876148025457],
    [5.523643905971386, -1.7514291852968205],
    [7.468137031216399, 1.959851931140097],
    [6.127616939486052, 1.0909139085943629],
    [6.525251259103717, 3.0174509329410455],
    [6.793491786589573, 7.0146624264862645],
    [7.31344650022041, 3.843836248937407],
    [5.208440963642344, -6.860107396391099],
    [6.359087157542284, -4.491748243336918],
    [5.703562843374264, 4.2306737262659375],
    [6.388683438933953, -1.7469572042356951],
    [7.313323998230229, 4.013649217040825],
    [6.5807368040160314, 3.2914284333200996],
    [7.431739090794311, -2.548831412795682],
    [6.106984510510009, -2.9609097166988105],
    [6.9543512528505556, 1.2036367758679436],
    [7.117000442132927, 6.409535312600273],
    [6.73416432126499, 5.5475523586174],
    [5.134731050686899, -6.456700059243398],
    [5.047662898577344, -6.654112236741409],
    [6.874114258153307, 6.658880620677854],
    [6.202083976372659, 1.2097008058886463],
    [6.716469869510457, -0.5345624776182554],
    [7.330973245748055, -6.50179080261511],
    [5.2268230537588884, 2.7127718905397575],
    [6.120719879117783, 5.9165000458755586],
    [6.272142837218789, -4.737582542518791],
    [7.490496575518602, -3.438218143613942],
]
START_TIME_INDEXES = [
    968,
    718,
    190,
    295,
    1167,
    703,
    997,
    448,
    140,
    165,
    943,
    1129,
    798,
    242,
    518,
    348,
    947,
    401,
    386,
    501,
    1094,
    640,
    904,
    775,
    468,
    221,
    276,
    323,
    815,
    991,
    348,
    1398,
    580,
    6,
    514,
    640,
    40,
    216,
    1243,
    1043,
    431,
    1311,
    693,
    840,
    1360,
    358,
    169,
    1031,
    48,
    569,
    510,
    862,
    1060,
    453,
    499,
    1284,
    594,
    1015,
    16,
    898,
    870,
    1131,
    528,
    327,
    985,
    1391,
    1029,
    1034,
    337,
    317,
    369,
    147,
    853,
    1275,
    104,
    435,
    1057,
    146,
    649,
    205,
    136,
    45,
    981,
    192,
    800,
    848,
    811,
    333,
    770,
    1083,
    1199,
    60,
    1376,
    571,
    874,
    703,
    1102,
    1127,
    120,
    71,
    201,
    417,
    737,
    1299,
    964,
    1175,
    465,
    228,
    951,
    1202,
    372,
    837,
    1052,
    1298,
    343,
    639,
    288,
    49,
    311,
    1088,
    1230,
    734,
    979,
    1090,
    668,
    1077,
    503,
    1014,
    1072,
    809,
    615,
    1087,
    1081,
    528,
    294,
    1207,
    226,
    856,
    1346,
    426,
    641,
    1195,
    115,
    825,
    357,
    125,
    676,
    128,
    402,
    142,
    1069,
    162,
    896,
    190,
    1225,
    1150,
    270,
    201,
    390,
    1063,
    415,
    669,
    1347,
    1396,
    64,
    1047,
    834,
    44,
    346,
    561,
    177,
    932,
    1174,
    1346,
    353,
    528,
    1395,
    1378,
    218,
    1328,
    607,
    596,
    38,
    935,
    1117,
    981,
    697,
    374,
    467,
    428,
    949,
    768,
    256,
    866,
    1383,
    228,
    446,
    223,
    882,
    1314,
    382,
    206,
    1333,
    780,
    1289,
    95,
    1191,
    413,
    827,
    657,
    166,
    882,
    1105,
    1008,
    1380,
    1095,
    75,
    291,
    1001,
    385,
    696,
    1116,
    838,
    756,
    964,
    626,
    535,
    1073,
    516,
    421,
    1328,
    125,
    334,
    737,
    755,
    641,
    826,
    978,
    336,
    464,
    1380,
    1137,
    1220,
    708,
    928,
    660,
    561,
    627,
    932,
    1230,
    688,
    210,
    1272,
    1169,
    345,
    485,
    755,
    954,
    54,
    23,
    342,
    507,
    1293,
    991,
    1008,
    861,
    797,
    594,
    437,
    183,
    1273,
    1164,
    777,
    996,
    970,
    936,
    63,
    70,
    496,
    788,
    153,
    663,
    566,
    22,
    1098,
    1280,
    1373,
    873,
    251,
    653,
    1362,
    864,
    380,
    14,
    110,
    856,
    1086,
    574,
    564,
    229,
]
RADIUS = 0.3
POS_BIAS = 0.05
ROBOT_COLOR = [1, 0.1, 0.1, 1]
PEDESTRIAN_COLOR = [0, 0.7, 0, 1]
TRAJ_DATA_PATH = "pixel_pos.csv"

"""Social-LSTM model settings"""
OBS_LENGTH = 5
PRED_LENGTH = 8
MODEL_NUM = 3
EPOCH = 140
X_SCALE = 10
Y_SCALE = -10

"""NMPC settings"""
HORIZON_LENGTH = PRED_LENGTH
# HORIZON_LENGTH = 3
NMPC_TIMESTEP = 0.4
ROBOT_RADIUS = 0.3
V_MAX = 1.5
V_MIN = 0
Qc = 5
kappa = 10

upper_bound = [(1 / np.sqrt(2)) * V_MAX] * HORIZON_LENGTH * 2
lower_bound = [-(1 / np.sqrt(2)) * V_MAX] * HORIZON_LENGTH * 2


def probability_to_alpha(probability):
    df = 2
    chi2_val = chi2.ppf(probability, df)
    return np.sqrt(chi2_val)


def create_sphere(radius, color, position):
    pedestrian_visual = p.createVisualShape(p.GEOM_SPHERE, radius=radius, rgbaColor=color)
    pedestrian_collision = p.createCollisionShape(p.GEOM_SPHERE, radius=RADIUS)
    return p.createMultiBody(baseMass=1,
                             baseInertialFramePosition=[0, 0, 0],
                             baseCollisionShapeIndex=pedestrian_collision,
                             baseVisualShapeIndex=pedestrian_visual,
                             basePosition=position)


class PedestrianPool:
    """
    Dynamic management of pedestrians
    """

    def __init__(self):
        self.active_pedestrians = {}
        self.inactive_pedestrians = []

        """Create 15 pedestrians in advance and place them in the distance"""
        for _ in range(15):
            self.inactive_pedestrians.append(create_sphere(RADIUS, PEDESTRIAN_COLOR, [50, 50, 50]))

    def get_pedestrian(self, pid, position):
        if self.inactive_pedestrians:
            pedestrian_id = self.inactive_pedestrians.pop()
            p.resetBasePositionAndOrientation(pedestrian_id, position, [0, 0, 0, 1])
        else:
            pedestrian_id = create_sphere(RADIUS, PEDESTRIAN_COLOR, position)
        self.active_pedestrians[pid] = pedestrian_id
        return pedestrian_id

    def release_pedestrian(self, pid):
        pedestrian_id = self.active_pedestrians.pop(pid, None)
        if pedestrian_id:
            p.resetBasePositionAndOrientation(pedestrian_id, [50, 50, 50], [0, 0, 0, 1])
            self.inactive_pedestrians.append(pedestrian_id)


def compute_xref(start, goal, number_of_steps, timestep):
    """
    Calculate reference points
    """
    dir_vec = goal - start
    norm = np.linalg.norm(dir_vec)
    if norm < POS_BIAS:
        goal = start
    elif norm > (POS_BIAS * 5):
        dir_vec = dir_vec / norm
        goal = start + dir_vec * V_MAX * timestep * number_of_steps
    else:
        dir_vec = dir_vec / norm
        start = start + dir_vec * V_MIN * timestep
    return np.linspace(start, goal, number_of_steps).reshape((2 * number_of_steps))


def precompute_ellipses(pred_gaussians, alpha):
    precomputed_ellipses = []
    if pred_gaussians:
        for ped_index in range(len(pred_gaussians[0])):
            ellipses_for_ped = []
            for i in range(len(pred_gaussians)):
                gaussian_params = pred_gaussians[i][ped_index]
                mux, muy, sx, sy, corr = gaussian_params

                cov_matrix = np.array([
                    [sx ** 2, corr * sx * sy],
                    [corr * sx * sy, sy ** 2]
                ])

                eigvals, eigvecs = np.linalg.eigh(cov_matrix)
                major_axis = alpha * np.sqrt(eigvals[1])
                minor_axis = alpha * np.sqrt(eigvals[0])
                rotation_angle = np.arctan2(eigvecs[1, 1], eigvecs[0, 1])

                ellipse_params = (mux, muy, major_axis, minor_axis, rotation_angle)
                ellipses_for_ped.append(ellipse_params)

            precomputed_ellipses.append(ellipses_for_ped)

    return precomputed_ellipses


def compute_velocity(robot_state, ellipses, xref):
    """
    Calculation of control speed in x, y direction
    Using convex hulls as prediction

    Final output of NMPC
    """
    u0 = np.zeros(2 * HORIZON_LENGTH)

    def cost_fn(u):
        return total_cost(u, robot_state, ellipses, xref)

    bounds = Bounds(lower_bound, upper_bound)
    res = minimize(cost_fn, u0, method='SLSQP', bounds=bounds, tol=1e-4)
    velocity = res.x[:2]
    return velocity, res.x


def compute_velocity_using_mean_points(robot_state, mean_points, xref):
    """
    Calculation of control speed in x, y direction
    Using mean points as prediction

    Final output of NMPC
    """
    u0 = np.random.rand(2 * HORIZON_LENGTH)

    def cost_fn(u):
        return total_cost_using_mean_points(u, robot_state, mean_points, xref)

    bounds = Bounds(lower_bound, upper_bound)
    res = minimize(cost_fn, u0, method='SLSQP', bounds=bounds, tol=1e-4)
    velocity = res.x[:2]
    return velocity, res.x


def total_cost(u, robot_state, ellipses, xref):
    """
    Calculate total cost
    """
    x_robot = update_state(robot_state, u, NMPC_TIMESTEP)
    c1 = tracking_cost(x_robot, xref)
    if ellipses:
        c2 = total_collision_cost(x_robot, ellipses)
        return c1 + c2
    else:
        return c1


def total_cost_using_mean_points(u, robot_state, mean_points, xref):
    """
    Calculate total cost
    """
    x_robot = update_state(robot_state, u, NMPC_TIMESTEP)
    c1 = tracking_cost(x_robot, xref)
    if mean_points:
        c2 = total_collision_cost_with_mean_points(x_robot, mean_points)
        return c1 + c2
    else:
        return c1


def tracking_cost(x, xref):
    """
    Calculate tracking cost
    """
    return np.linalg.norm(x - xref)


def get_mean_points(pred_gaussians):
    """
    Extract mean points (mux, muy) for each pedestrian and return a list of lists of points
    """
    mean_points = []
    if pred_gaussians:
        num_pedestrians = len(pred_gaussians[0])
        for ped_index in range(num_pedestrians):
            pedestrian_points = []
            for i in range(len(pred_gaussians)):
                gaussian_params = pred_gaussians[i][ped_index]
                mux, muy = gaussian_params[:2]  # Extract mux and muy
                pedestrian_points.append((mux, muy))
            mean_points.append(pedestrian_points)
    return mean_points


def total_collision_cost(robot, ellipses):
    total_cost = 0.0
    num_pedestrians = len(ellipses)
    for ped_index in range(num_pedestrians):
        for i in range(len(ellipses[ped_index])):
            rob = robot[2 * i: 2 * i + 2]
            robot_point = np.array(rob)
            ellipse_params = ellipses[ped_index][i]
            total_cost += collision_cost(robot_point, ellipse_params)
    return total_cost


def total_collision_cost_with_mean_points(robot, mean_points):
    total_cost = 0.0
    num_pedestrians = len(pred_gaussians[0])
    for ped_index in range(num_pedestrians):
        pedestrian_points = mean_points[ped_index]
        for i in range(len(pred_gaussians)):
            rob = robot[2 * i: 2 * i + 2]
            robot_point = np.array(rob)
            pedestrian_mean_point = np.array(pedestrian_points[i])
            total_cost += collision_cost_with_mean_points(robot_point, pedestrian_mean_point)
    return total_cost


def collision_cost(robot_point, ellipse_params):
    x_robot, y_robot = robot_point
    mux, muy, major_axis, minor_axis, rotation_angle = ellipse_params

    cos_angle = np.cos(-rotation_angle)
    sin_angle = np.sin(-rotation_angle)

    x_transformed = cos_angle * (x_robot - mux) - sin_angle * (y_robot - muy)
    y_transformed = sin_angle * (x_robot - mux) + cos_angle * (y_robot - muy)

    ellipse_value = (x_transformed / major_axis) ** 2 + (y_transformed / minor_axis) ** 2

    if ellipse_value <= 1.0:
        d = 0
    else:
        x_closest = major_axis * (
                    x_transformed / np.sqrt(x_transformed ** 2 + (y_transformed * major_axis / minor_axis) ** 2))
        y_closest = minor_axis * (
                    y_transformed / np.sqrt((x_transformed * minor_axis / major_axis) ** 2 + y_transformed ** 2))

        dx = x_transformed - x_closest
        dy = y_transformed - y_closest
        d = np.sqrt(dx ** 2 + dy ** 2)

    return Qc / (1 + np.exp(kappa * (d - 2 * ROBOT_RADIUS)))


def collision_cost_with_mean_points(robot_point, mean_point):
    d = np.linalg.norm(robot_point - mean_point)
    return Qc / (1 + np.exp(kappa * (d - 2 * ROBOT_RADIUS)))


def update_state(x0, u, timestep):
    """
    Update the state of the robot
    """
    N = int(len(u) / 2)
    lower_triangular_ones_matrix = np.tril(np.ones((N, N)))
    kron = np.kron(lower_triangular_ones_matrix, np.eye(2))
    return np.vstack([np.eye(2)] * N) @ x0 + kron @ u * timestep


def scale_coords_and_gaussians(obs_pos, pred_gaussians, x_scale, y_scale):
    scaled_obs_pos = []
    for t in range(len(obs_pos)):
        scaled_coords_t = []
        for coord in obs_pos[t]:
            scaled_coords_t.append([coord[0] * x_scale, coord[1] * y_scale])
        scaled_obs_pos.append(scaled_coords_t)

    scaled_pred_gaussians = []
    for gaussians_t in pred_gaussians:
        scaled_gaussians_t = []
        for gaussian_params in gaussians_t:
            mux, muy, sx, sy, corr = gaussian_params
            scaled_gaussians_t.append([mux * x_scale, muy * y_scale, sx * x_scale, sy * y_scale, corr])
        scaled_pred_gaussians.append(scaled_gaussians_t)

    return scaled_obs_pos, scaled_pred_gaussians


def check_pos(current, target, bias):
    """
    Check if pos is at goal with bias
    """
    if target[0] + bias > current[0] > target[0] - bias and target[1] + bias > current[1] > target[1] - bias:
        return True
    else:
        return False


def calculate_distance(vel, time_step):
    velocity_magnitude = math.sqrt(vel[0]**2 + vel[1]**2)
    return velocity_magnitude * time_step


def if_collided(robot_pos, pedestrian_pos, radius):
    distance = np.sqrt((robot_pos[0] - pedestrian_pos[0]) ** 2 + (robot_pos[1] - pedestrian_pos[1]) ** 2)
    return distance <= 2 * radius


"""Pybullet setup"""
p.connect(p.GUI, options="--width=768 --height=768")
p.configureDebugVisualizer(p.COV_ENABLE_GUI, 0)
p.setAdditionalSearchPath(pybullet_data.getDataPath())
p.setGravity(0, 0, -10)
p.loadURDF("plane.urdf")
p.resetDebugVisualizerCamera(cameraDistance=15, cameraYaw=0, cameraPitch=-89.999, cameraTargetPosition=[0, 0, 0])
p.setRealTimeSimulation(1)

"""Load robot model"""
robotId = create_sphere(RADIUS, ROBOT_COLOR, [START_POS[0], START_POS[1], RADIUS])

"""Load Social-LSTM model"""
predictor = Predictor(MODEL_NUM, EPOCH)

"""Prepare trajectory plotter"""
plotter = TrajectoryPlotter()

pedestrian_pool = PedestrianPool()
clean_data = []

"""Read dataset"""
with open(TRAJ_DATA_PATH, 'r') as file:
    reader = csv.reader(file)
    data = list(reader)

    if len(data) != 4:
        raise ValueError("CSV file does not have the correct format. Expected 4 rows.")

    frames = np.array([int(frame) for frame in data[0]])
    pids = np.array([int(pid) for pid in data[1]])
    y_coords = np.array([float(y) for y in data[2]]) * Y_SCALE
    x_coords = np.array([float(x) for x in data[3]]) * X_SCALE

    clean_data = np.vstack((frames, pids, x_coords, y_coords)).T

time_steps = np.unique(clean_data[:, 0])

"""Experiment result data"""
collision_number = [0, 0, 0]
path_length = [0, 0, 0]
time_spent = [0, 0, 0]

# test_num = 5
test_num = len(START_TIME_INDEXES)

for scenario in range(3):
    if scenario == 0:
        USE_GAUSSIAN = False
    elif scenario == 1:
        USE_GAUSSIAN = True
        P = 0.3
    else:
        USE_GAUSSIAN = True
        P = 0.9

    for test_index in range(test_num):
        start_time_index = START_TIME_INDEXES[test_index]
        START_POS = START_POSES[test_index]
        TARGET_POS = TARGET_POSES[test_index]

        """Convert probability to alpha"""
        alpha = probability_to_alpha(P)

        p.resetBasePositionAndOrientation(robotId,
                                          [START_POS[0], START_POS[1],
                                           RADIUS],
                                          [0, 0, 0, 1])

        history_positions = {pid: [] for pid in np.unique(pids)}
        for pid in list(pedestrian_pool.active_pedestrians.keys()):
            pedestrian_pool.release_pedestrian(pid)

        """Start simulation"""
        for time_step in time_steps[start_time_index:]:

            robot_pos, _ = p.getBasePositionAndOrientation(robotId)

            if check_pos(robot_pos, TARGET_POS, POS_BIAS * 5):
                break

            # previous_time = time.time()
            current_data = clean_data[clean_data[:, 0] == time_step]
            current_ids = set()

            collision_flag = False
            for record in current_data:
                frame, pid, x, y = int(record[0]), int(record[1]), record[2], record[3]
                current_ids.add(pid)
                new_position = np.array([x, y, RADIUS])
                if if_collided(robot_pos[:2], [x, y], RADIUS):
                    collision_number[scenario] += 1
                    collision_flag = True
                    break

                if pid not in pedestrian_pool.active_pedestrians:
                    pedestrian_pool.get_pedestrian(pid, new_position)
                else:
                    p.resetBasePositionAndOrientation(pedestrian_pool.active_pedestrians[pid], new_position, [0, 0, 0, 1])
            if collision_flag:
                break

            """Recycle pedestrian objects that have left"""
            for pid in list(pedestrian_pool.active_pedestrians.keys()):
                if pid not in current_ids:
                    pedestrian_pool.release_pedestrian(pid)
                    del history_positions[pid]

            """The ids and corresponding x, y coordinates of all active pedestrians at the current moment"""
            active_pedestrians_info = {pid: p.getBasePositionAndOrientation(pedestrian_pool.active_pedestrians[pid])[0][:2] for
                                       pid in current_ids}

            """Update the historical location of each pedestrian"""
            for pid in current_ids:
                history_positions[pid].append(np.array([pid] + list(active_pedestrians_info[pid])))
                if len(history_positions[pid]) > OBS_LENGTH:
                    history_positions[pid].pop(0)

            """Check if any pedestrian's historical position length satisfies OBS_LENGTH"""
            x_seq = []
            for t in range(OBS_LENGTH):
                frame_data = []
                for pid, positions in history_positions.items():
                    if len(positions) == OBS_LENGTH:
                        position = positions[t]
                        """Zoom coordinates"""
                        new_position = np.array([position[0], position[1] / X_SCALE, position[2] / Y_SCALE])
                        frame_data.append(new_position)
                if frame_data:
                    x_seq.append(np.array(frame_data))

            obs_pos, pred_gaussians = None, None
            if x_seq:
                obs_pos, pred_gaussians = predictor.predict_trajectory(x_seq, OBS_LENGTH, PRED_LENGTH, [640, 480])
                obs_pos, pred_gaussians = scale_coords_and_gaussians(obs_pos, pred_gaussians, X_SCALE, Y_SCALE)

            xref = compute_xref(np.array(robot_pos[:2]), TARGET_POS, HORIZON_LENGTH, NMPC_TIMESTEP)

            if USE_GAUSSIAN:
                """Using gaussian distributions"""
                ellipses = precompute_ellipses(pred_gaussians, alpha)
                mean_points = None
                vel, _ = compute_velocity(np.array(robot_pos[:2]), ellipses, xref)
            else:
                """Using mean points"""
                ellipses = None
                mean_points = get_mean_points(pred_gaussians)
                vel, _ = compute_velocity_using_mean_points(np.array(robot_pos[:2]), mean_points, xref)

            plotter.plot_trajectory_and_robot(OBS_LENGTH, obs_pos, ellipses, mean_points, robot_pos)

            """Robot Simple Transient"""
            p.resetBasePositionAndOrientation(robotId,
                                              [vel[0] * NMPC_TIMESTEP + robot_pos[0], vel[1] * NMPC_TIMESTEP + robot_pos[1],
                                               RADIUS],
                                              [0, 0, 0, 1])

            path_length[scenario] += calculate_distance(vel, NMPC_TIMESTEP)
            time_spent[scenario] += NMPC_TIMESTEP

            # time_delay = NMPC_TIMESTEP - (time.time() - previous_time)
            # if time_delay > 0:
            #     time.sleep(time_delay)

        print(f"Scenario {scenario} test {test_index} finished, total collision: {collision_number[scenario]}, total length: {path_length[scenario]}, total time: {time_spent[scenario]}")

print(f"\nAll test finished!")
for scenario in range(3):
    collision_num = collision_number[scenario]
    test_num_without_collision = test_num - collision_num
    aver_length = path_length[scenario] / test_num_without_collision
    aver_time = time_spent[scenario] / test_num_without_collision
    print(f"Scenario {scenario}: total collision: {collision_num}, average length: {aver_length}, average time: {aver_time}")

"""End simulation"""
p.disconnect()
